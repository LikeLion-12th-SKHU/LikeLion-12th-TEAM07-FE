import React, { useState, useEffect, useRef } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import EffectSound from './EffectSound';
import GameRule from './GameRule';
import logoImage from '../assets/logo.png';
import GameResult from '../components/GameResult';
import SuggestedWord from '../components/SuggestedWord';

import {
    Container,
    Header,
    LogoButton,
    LobbyBody,
    Category,
    ProfileBack,
    Content,
    DetailCategory,
    Element1,
    Element2,
    Element3,
    Element4,
    Element5,
    Element6,
    SubTopicList,
    Element7,
    ViewResult,
    Screen,
    Victory,
    SubTopics,
    Ele,
    ButtonContainer,
    SuggesteWord,
    PlayerId,
    Title,
    GameRuleWindow,
    RoomOut,
    Result,
} from '../css/FinalMatchCss.js';
import { Logo, LogoContainer, GameName } from '../css/GameRoom.js';

const wordLists = {
    'Ïã†Ï≤¥ Í±¥Í∞ï': [
        'Ïö¥Îèô',
        'ÏòÅÏñë',
        'Îã§Ïù¥Ïñ¥Ìä∏',
        'ÏàòÎ∂Ñ ÏÑ≠Ï∑®',
        'Ï≤¥Î†•',
        'Ïú†Ïó∞ÏÑ±',
        'Í∑ºÎ†•',
        'Ïã¨Ìèê ÏßÄÍµ¨Î†•',
        'ÎåÄÏÇ¨',
        'Í∑ºÏú°',
    ],
    'Ï†ïÏã† Í±¥Í∞ï': [
        'Ïä§Ìä∏Î†àÏä§ Í¥ÄÎ¶¨',
        'Î™ÖÏÉÅ',
        'ÏöîÍ∞Ä',
        'ÏÉÅÎã¥',
        'Í∞êÏ†ï Ï°∞Ï†à',
        'Ïö∞Ïö∏Ï¶ù',
        'Î∂àÏïà',
        'Ï†ïÏã† ÏπòÎ£å',
        'ÎßàÏùå Ï±ôÍπÄ',
        'Í∏çÏ†ïÏ†Å ÏÇ¨Í≥†',
    ],
    'ÏòàÎ∞© Î∞è Í¥ÄÎ¶¨': [
        'Í±¥Í∞ïÍ≤ÄÏßÑ',
        'ÏòàÎ∞© Ï†ëÏ¢Ö',
        'Í≤ÄÏßÑ',
        'Ï†ïÍ∏∞ Í≤ÄÏÇ¨',
        'Ïä§ÌÅ¨Î¶¨Îãù',
        'Í±¥Í∞ï Î≥¥Ìóò',
        'ÏòàÎ∞© ÏùòÌïô',
        'Í±¥Í∞ï Í¥ÄÎ¶¨ Í≥ÑÌöç',
        'Î≥ëÏõê',
        'ÌÅ¥Î¶¨Îãâ',
    ],
    ÏãùÏÉùÌôú: [
        'ÏòÅÏñëÏÜå',
        'ÎπÑÌÉÄÎØº',
        'ÎØ∏ÎÑ§ÎûÑ',
        'Ìï≠ÏÇ∞ÌôîÏ†ú',
        'ÏãùÎã®',
        'Í±¥Í∞ï ÏãùÌíà',
        'ÏäàÌçºÌë∏Îìú',
        'ÏãùÏù¥ÏÑ¨Ïú†',
        'Îã®Î∞±Ïßà',
        'Ï†ÄÏßÄÎ∞©',
    ],
    'ÏÉùÌôú ÏäµÍ¥Ä': [
        'ÏàòÎ©¥',
        'Ìú¥Ïãù',
        'Í∑úÏπôÏ†ÅÏù∏ ÏÉùÌôú',
        'ÏúÑÏÉù',
        'Í∏àÏó∞',
        'Ï†àÏ£º',
        'Ïä§Ìä∏Î†àÏπ≠',
        'Í±∑Í∏∞',
        'Ïû¨Ï∂©Ï†Ñ',
        'ÏûêÏô∏ÏÑ† Ï∞®Îã®',
    ],
    'ÏßàÎ≥ë Î∞è ÏπòÎ£å': [
        'Î©¥Ïó≠Î†•',
        'Í∞êÏóº',
        'ÏóºÏ¶ù',
        'Ìï≠ÏÉùÏ†ú',
        'Î∞±Ïã†',
        'ÏàòÏà†',
        'ÏïΩÎ¨º',
        'Ïû¨Ìôú',
        'Î¨ºÎ¶¨ÏπòÎ£å',
        'ÏùëÍ∏âÏ≤òÏπò',
    ],
    'Í±¥Í∞ï ÏÉÅÌÉú': [
        'Ïã¨ÌòàÍ¥Ä',
        'ÌòàÏïï',
        'ÏΩúÎ†àÏä§ÌÖåÎ°§',
        'ÎãπÎá®',
        'ÎπÑÎßå',
        'Í≥®Îã§Í≥µÏ¶ù',
        'Í¥ÄÏ†àÏóº',
        'Ï≤úÏãù',
        'ÏïåÎ†àÎ•¥Í∏∞',
        'ÏÜåÌôî',
    ],
};

const FinalMatch = () => {
    const location = useLocation();
    const [selectedWord, setSelectedWord] = useState(null);
    const [gameResult, setGameResult] = useState(null);
    const [isGameRuleVisible, setIsGameRuleVisible] = useState(false);
    const [timer, setTimer] = useState(15); // ÌÉÄÏù¥Î®∏ Ï¥àÍ∏∞Í∞í ÏÑ§Ï†ï
    const [buttonsDisabled, setButtonsDisabled] = useState(false); // Î≤ÑÌäº ÎπÑÌôúÏÑ±Ìôî ÏÉÅÌÉú
    const effectSound = useRef(null);
    const navigate = useNavigate();
    const [openResult, setOpenResult] = useState(false);
    const [openResultSuggest, setOpenResultSuggest] = useState(false);
    const [suggestedWord, setSuggestedWord] = useState('');

    const {
        roomData = {
            topic: 'Í∏∞Î≥∏ Ï£ºÏ†ú',
            votingTimeLimit: 20,
            name: 'Í∏∞Î≥∏ Î∞© Ïù¥Î¶Ñ',
            playerCount: 6,
            shuffledPlayers: [],
        },
        subTopic = 'ÏóÜÏùå',
    } = location.state || {};
    const words = wordLists[roomData.topic] || [];

    const handleTopicClick = (word) => {
        if (!buttonsDisabled) {
            setSelectedWord(word);
        }
    };

    useEffect(() => {
        const finalizeTimer = setInterval(() => {
            setTimer((prev) => {
                if (prev <= 1) {
                    clearInterval(finalizeTimer);
                    // ÏµúÏ¢Ö ÏÑ†ÌÉùÎêú Í≤∞Í≥ºÏóê Îî∞Îùº Ï≤òÎ¶¨
                    if (selectedWord === subTopic) {
                        setGameResult('ÎùºÏù¥Ïñ¥');
                    } else {
                        setGameResult('ÏãúÎØº');
                    }
                    setButtonsDisabled(true); // ÌÉÄÏù¥Î®∏ Ï¢ÖÎ£å Ïãú Î≤ÑÌäº ÎπÑÌôúÏÑ±Ìôî
                    return 0;
                }
                return prev - 1;
            });
        }, 1000);

        return () => clearInterval(finalizeTimer);
    }, [selectedWord, subTopic]);

    const closeGameResult = () => {
        effectSound.current.playSound();
        setOpenResult(false);
    };

    const openGameResult = () => {
        effectSound.current.playSound();
        setOpenResult(true);
    };

    const OpenSuggestedWord = () => {
        effectSound.current.playSound();
        setSuggestedWord(roomData.topic);
        setOpenResultSuggest(true);
    };

    const closeSuggestedWord = () => {
        effectSound.current.playSound();
        setOpenResultSuggest(false);
    };

    const toggleGameRule = () => {
        effectSound.current.playSound();
        setIsGameRuleVisible(!isGameRuleVisible);
    };

    const ElementComponents = [
        Element1,
        Element2,
        Element3,
        Element4,
        Element5,
        Element6,
        Element7,
    ];

    return (
        <>
            <Container>
                <Header>
                    <LogoButton>Like Liar</LogoButton>
                </Header>
                <LobbyBody>
                    <Category>
                        <ProfileBack>
                            <Logo>
                                <LogoContainer>
                                    <img
                                        className="logo"
                                        src={logoImage}
                                        alt="LikeLiar"
                                    />
                                    <p className="miniTitle">[ Î∞© Ï†úÎ™© ]</p>
                                </LogoContainer>
                                <GameName>{roomData.name}</GameName>
                            </Logo>
                        </ProfileBack>
                        <DetailCategory>
                            {roomData.shuffledPlayers.map((player, index) => {
                                if (player.name === '') return null;

                                const ElementComponent =
                                    ElementComponents[index] || Element7;

                                return (
                                    <Ele
                                        key={player.id}
                                        style={{ backgroundColor: '#dfdfdf' }}
                                    >
                                        <ElementComponent>
                                            {index + 1}
                                        </ElementComponent>
                                        <PlayerId>{player.name}</PlayerId>
                                    </Ele>
                                );
                            })}
                        </DetailCategory>
                        <GameRuleWindow onClick={toggleGameRule} />
                    </Category>
                    <Screen>
                        <SuggesteWord>
                            <Title>Finalüî•</Title>
                            <Content>Ï†úÏãúÏñ¥Î•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî</Content>
                        </SuggesteWord>
                        <SubTopicList>
                            {words.map((topic, index) => (
                                <SubTopics
                                    key={index}
                                    isSelected={selectedWord === topic}
                                    onClick={() => handleTopicClick(topic)}
                                    disabled={buttonsDisabled}
                                >
                                    {topic}
                                </SubTopics>
                            ))}
                        </SubTopicList>

                        <Result>
                            <div className="ALL">
                                {timer > 0 ? (
                                    <>
                                        <div
                                            style={{
                                                color:
                                                    timer <= 10
                                                        ? 'red'
                                                        : 'black',
                                            }}
                                        >
                                            {timer}
                                        </div>
                                        Ï¥à ÎÇ®ÏïòÏäµÎãàÎã§.
                                    </>
                                ) : (
                                    <Victory>
                                        <b
                                            className="vitory"
                                            style={{
                                                color:
                                                    gameResult === 'ÎùºÏù¥Ïñ¥'
                                                        ? 'red'
                                                        : 'green',
                                            }}
                                        >
                                            {gameResult}
                                        </b>
                                        <div>ÏäπÎ¶¨</div>
                                        <ButtonContainer>
                                            <RoomOut onClick={openGameResult}>
                                                ÎÇòÍ∞ÄÍ∏∞
                                            </RoomOut>
                                            <ViewResult
                                                onClick={OpenSuggestedWord}
                                            >
                                                Ï†úÏãúÏñ¥
                                            </ViewResult>
                                        </ButtonContainer>
                                    </Victory>
                                )}
                            </div>
                        </Result>
                    </Screen>
                </LobbyBody>
            </Container>
            <EffectSound ref={effectSound} />
            {openResult && (
                <GameResult
                    result={gameResult}
                    onClose={closeGameResult}
                    roomData={roomData}
                />
            )}
            {openResultSuggest && (
                <SuggestedWord
                    word={suggestedWord}
                    wordSubTopic={subTopic}
                    onClose={closeSuggestedWord}
                />
            )}
            {isGameRuleVisible && <GameRule onClose={toggleGameRule} />}
        </>
    );
};

export default FinalMatch;
